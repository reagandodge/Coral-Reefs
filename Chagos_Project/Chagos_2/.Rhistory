ps_ra = transform_sample_counts(ps,function(x){x/sum(x)})
# quick ordination
ord1=ordinate(ps_ra,method="DCA")
plot_ordination(ps,ord1,color="Island")
vegan::adonis(otu_table(ps_ra) ~ ps_ra@sam_data$`Reef Type`)
ps_ra@sam_data$Island
sample_data(ps_ra)$Island
vegan::adonis(otu_table(ps_ra) ~ ps_ra@sam_data$`Reef Type`+ps_ra@sam_data$Exposure)
vegan::diversity(otu_table(ps_ra))
vegan::diversity(otu_table(ps_ra),index = "shannon")
# shannon diversity
shannon = vegan::diversity(otu_table(ps_ra),index = "shannon")
sample_data(ps_ra)$Shannon = shannon
sample_data(ps_ra)
# richness
specnumber(otu_table(ps_ra))
# richness
rich = specnumber(otu_table(ps_ra))
sample_data(ps_ra)$Richness = rich
sample_data(ps_ra)
shannonmod = glm(Shannon ~ salinity,data=sample_data(ps_ra))
shannonmod = glm(Shannon ~ salinity,data=as.data.frame(sample_data(ps_ra)))
x = sample_data(ps_ra)
class(x)
summary(shannonmod)
meta = as.data.frame(sample_data(ps_ra))
View(meta)
meta$salinity
as.numeric(meta$salinity)
meta$salinity = as.numeric(meta$salinity)
shannonmod = glm(Shannon ~ salinity,data=as.data.frame(sample_data(ps_ra)))
summary(shannonmod)
shannonmod = glm(Shannon ~ salinity,data=meta)
summary(shannonmod)
vegan::adonis(otu_table(ps_ra) ~ ps_ra@sam_data$`Colony Colour`)
ps <- readRDS("phyloseq_object_16S.RDS")
sample_names(ps)
rank_names(ps)
sample_variables(ps)
head(otu_table(ps))
head(sample_data(ps))
head(tax_table(ps))
ps
ps_ra = transform_sample_counts(ps,function(x){x/sum(x)})
# quick ordination
ord1=ordinate(ps_ra,method="DCA")
plot_ordination(ps,ord1,color="Island")
vegan::adonis(otu_table(ps_ra) ~ ps_ra@sam_data$`Colony Colour`)
# shannon diversity
shannon = vegan::diversity(otu_table(ps_ra),index = "shannon")
sample_data(ps_ra)$Shannon = shannon
# richness
rich = specnumber(otu_table(ps_ra))
library("phyloseq")
library("ggplot2")
# richness
rich = specnumber(otu_table(ps_ra))
library("ape")
# richness
rich = specnumber(otu_table(ps_ra))
?specnumber
# shannon diversity
shannon = vegan::diversity(otu_table(ps_ra),index = "shannon")
sample_data(ps_ra)$Shannon = shannon
sample_data(ps_ra)$Shannon
ps_ra
# richness
rich = specnumber(otu_table(ps_ra))
sample_data(ps_ra)$Richness = rich
meta = as.data.frame(sample_data(ps_ra))
library(tidyverse)
# richness
rich = specnumber(otu_table(ps_ra))
specnumber
meta$salinity = as.numeric(meta$salinity)
shannonmod = glm(Shannon ~ salinity,data=meta)
summary(shannonmod)
x = sample_data(ps_ra)
class(x)
ps_ra@sam_data$Island
sample_data(ps_ra)$Island
+ lims(x=c(-200,-100))
# look at it
#
plot_bar(ps, fill = "Phylum") + theme(legend.position="bottom")
library(ggplot2)
data("GlobalPatterns")
library(phyloseq)
GP <- prune_species(speciesSums(GlobalPatterns) > 0, GlobalPatterns)
plot_richness(GP)
plot_richness(ps)
# specify richness
plot_richness(GP,measures = c("Choal1", "Shannon"))
# choose meaningful experimental value "SampleType"
plot_richness(GP, x="SampleType", measures=c("Chao1", "Shannon"))
# adding an external variable
sampleData(GP)$human <- getVariable(GP, "SampleType") %in% c("Feces", "Mock", "Skin", "Tongue")
# now plot it using that new variable
plot_richness(GP, x="human", color="SampleType", measures=c("Chao1", "Shannon"))
#merge samples
GPst = merge_samples(GP, "SampleType")
# repair them
sample_data(GPst)$SampleType <- factor(sample_names(GPst))
sample_data(GPst)$human <- as.logical(sample_data(GPst)$human)
# plot this version of merged data
p = plot_richness(GPst, x="human", color="SampleType", measures=c("Chao1", "Shannon"))
p + geom_point(size=5, alpha=0.7)
ch <- prune_species(speciesSums(ps) > 0, ps)
plot_richness(ps)
#specify richness
plot_richness(GP,measures = c("Simpson", "Shannon"))
sample_names
sample_names(ps)
rank_names(ps)
sample_variables(ps)
ps <- prune_species(speciesSums(ps) > 0, ps)
#plot richness
plot_richness(ps)
#specify richness
plot_richness(ps,measures = c("Simpson", "Shannon"))
plot_richness(ps, x="site", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="sample #", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="depth", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="depth (m)", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Island", measures=c("Simpson", "Shannon"))
head(sample_data(ps))
sample_variables(ps)
plot_richness(ps, x=ps@sam_data$`Temp Range (oC)`, measures=c("Simpson", "Shannon"))
plot_richness(ps, x="ps@sam_data$`Temp Range (oC)`", measures=c("Simpson", "Shannon"))
plot_richness(ps, x=ps@sam_data$`Temp Range (oC)`, measures=c("Simpson", "Shannon"))
plot_richness(ps, x=ps@sam_data$`Reef Type`, measures=c("Simpson", "Shannon"))
plot_richness(ps, x="`Reef Type`", measures=c("Simpson", "Shannon"))
library("phyloseq")
library("ggplot2")
library(tidyverse)
theme_set(theme_bw())
data("GlobalPatterns")
data("esophagus")
data("enterotype")
data(soilrep)
?GlobalPatterns
example(enterotype, ask = FALSE)
?phyloseq
?otu_table
?sample_data
?tax_table
# Create a pretend OTU table
otumat = matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)
otumat
# add row names to the OTU table
rownames(otumat) <- paste0("OTU", 1:nrow(otumat))
colnames(otumat) <- paste0("Sample", 1:ncol(otumat))
otumat
taxmat = matrix(sample(letters, 70, replace = TRUE), nrow = nrow(otumat), ncol = 7)
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
class(otumat)
class(taxmat)
# now we are going to combine into a phyloseq object
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
physeq = phyloseq(OTU, TAX )
physeq
plot_bar(physeq, fill = "Family")
# creating a random sample data set to add to this
sampledata = sample_data(data.frame(
Location = sample(LETTERS[1:4], size=nsamples(physeq), replace=TRUE),
Depth = sample(50:1000, size=nsamples(physeq), replace=TRUE),
row.names=sample_names(physeq),
stringsAsFactors=FALSE
))
sampledata
physeq
physeq = phyloseq(otu_table(physeq),tax_table(physeq),sample_data(sampledata))
plot_bar(physeq, fill = "Phylum") + facet_wrap(~Location)
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
plot(random_tree)
# now merge new data with current phyloseq data
physeq1 = merge_phyloseq(physeq, sampledata, random_tree)
physeq1
# are they identical?
identical(physeq1, physeq) # no
plot_tree(physeq1, color="Location", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
plot_tree(physeq1, color="Depth", shape="Location", label.tips="taxa_names", ladderize="right", plot.margin=0.3)
plot_heatmap(physeq1)
plot_heatmap(physeq1, taxa.label="Phylum")
ps <- readRDS("phyloseq_object_16S.RDS")
sample_names(ps)
rank_names(ps)
sample_variables(ps)
head(otu_table(ps))
head(sample_data(ps))
head(tax_table(ps))
ps
ps_ra = transform_sample_counts(ps,function(x){x/sum(x)})
# quick ordination
ord1=ordinate(ps_ra,method="DCA")
plot_ordination(ps,ord1,color="Island")
vegan::adonis(otu_table(ps_ra) ~ ps_ra@sam_data$`Colony Colour`)
# shannon diversity
shannon = vegan::diversity(otu_table(ps_ra),index = "shannon")
sample_data(ps_ra)$Shannon = shannon
# richness
rich = specnumber(otu_table(ps_ra))
sample_data(ps_ra)$Richness = rich
library(vegan)
# richness
rich = specnumber(otu_table(ps_ra))
sample_data(ps_ra)$Richness = rich
ps_ra
sample_data(ps_ra
sample_data(ps_ra)$Richness = rich
library(vegan)
# richness
rich = specnumber(otu_table(ps_ra))
sample_data(ps_ra)$Richness = rich
meta = as.data.frame(sample_data(ps_ra))
meta$salinity = as.numeric(meta$salinity)
shannonmod = glm(Shannon ~ salinity,data=meta)
summary(shannonmod)
x = sample_data(ps_ra)
class(x)
ps_ra@sam_data$Island
ps_ra@sam_data
sample_data(ps_ra)$Island
# look at it
#
plot_bar(ps, fill = "Phylum") + theme(legend.position="bottom")
plot_tree(ps, color="Location", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
# look at it
plot_bar(ps, fill = "Phylum") + facet_wrap(~Island) + theme(legend.position="bottom")
plot_richness(ps, x="depth..m.", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Temp.Range..oC.", measures=c("Simpson", "Shannon"))
plot_tree(ps, color="Phylum", label.tips="taxa_names", ladderize="left", plot.margin=0.3)
ntaxa(ps)
physeq = prune_taxa(taxa_names(ps)[1:50], ps)
plot_tree(physeq)
head(phy_tree(ps)$node.label, 10)
# phylotree
library(phangorn)
install.packages("phangorn")
# phylotree
library(phangorn)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
yes
library(msa)
# phylotree
library(phangorn)
# Build Phylogenetic Tree ####
seqs <- rownames(tax_table(ps))
names(seqs) <- seqs # This propagates to the tip labels of the tree
seqs
# alignment (took 37 hours to complete!)
alignment <- msa(seqs,method = "Muscle", type = "dna",verbose = TRUE,order = "input",maxiters = 12)
# save progress
saveRDS(alignment,"../Chagos_2/WWP_dna_alignment_muscle.RDS")
# re-load point
alignment <- readRDS("../Chagos_2/WWP_dna_alignment_muscle.RDS")
phang.align = as.phyDat(alignment, type = "DNA")
# distance max likelihood
dm <- dist.ml(phang.align)
#save
saveRDS(dm,"../Chagos_2/output/ML_Distance.RDS")
#save
saveRDS(dm,"../Chagos_2/ML_Distance.RDS")
# re-load point
alignment <- readRDS("../Chagos_2/WWP_dna_alignment_muscle.RDS")
phang.align = as.phyDat(alignment, type = "DNA")
# distance max likelihood
dm <- dist.ml(phang.align)
#save
saveRDS(dm,"../Chagos_2/ML_Distance.RDS")
# neighbor-joining tree
treeNJ <- NJ(dm) # Note, tip order != sequence order
treeNJ$tip.label <- seqs
#save
saveRDS(treeNJ, "../Chagos_2/treeNJ.RDS")
treeNJ <- readRDS("../Chagos_2/treeNJ.RDS")
fit = pml(treeNJ, data=phang.align)
#save
saveRDS(fit,"../Chagos_2/fit_treeNJ.RDS")
fitJC <- optim.pml(fit, TRUE)
# save
saveRDS(fitJC, "../Chagos_2/WWP_fitJC.RDS") # This is the new tree using optim.pml
write.tree(fitJC$tree, file = "../Chagos_2/WWP_bact_tree_JC.nwk")
# reload point
fitJC <- readRDS("../Chagos_2/WWP_fitJC.RDS")
(unique(names(seqs)))
# Bootstrap
bs = bootstrap.pml(fitJC, bs=100, control = pml.control(trace = 0),multicore = TRUE, mc.cores = 10)
?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
# check tree with plot
plotBS(fitJC$tree,type="p")
fitJC$tree
fitJC$node.label
# check tree with plot
plotBS(fitJC$node.label,type="p")
# check tree with plot
plotBS(fitJC$tree,type="p")
install.packages("parallel")
a
library(parallel)
detectCores()
detectCores(all.tests = FALSE, logical = TRUE)
# Bootstrap
bs = bootstrap.pml(fitJC, bs=100, control = pml.control(trace = 0),multicore = TRUE, mc.cores = 4)
#?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
install.packages("gridExtra")
data("iris")
iris<- data("iris")
library(iris)
data("iris")
iris<-data("iris")
data("iris")
iris
head(iris)
head(iris)
iris$substrate_one<- iris$Sepal.Length
irissubstrate_two<- iris$Sepal.Width
iris$substrate_three<-iris$Petal.Length
head(iris)
irissubstrate_two<- iris$Sepal.Width
head(iris)
iris$substrate_two<- iris$Sepal.Width
head(iris)
iris$substrate_one<- iris$Sepal.Length
iris$substrate_two<- iris$Sepal.Width
iris$substrate_three<-iris$Petal.Length
head(iris)
iris$container<- c("cardboard", "plastic", "uvu_waste")
head(iris)
ggplot(iris, aes(x= iris$container, y= iris$substrate_one))
ggplot(iris, aes(x= iris$container, y= iris$substrate_one))+
geom_bar
ggplot(iris, aes(x= iris$container, y= iris$substrate_one))+
geom_poin
ggplot(iris, aes(x= iris$container, y= iris$substrate_one))+
geom_point
ggplot(iris, aes(x= iris$container, y= iris$substrate_one))+
geom_abline()
iris$substrate<- c(iris$substrate_one, iris$substrate_two)
iris$substrate<- c("iris$substrate_one", "iris$substrate_two")
head(iris)
View(iris)
ggplot(iris, aes(x= iris$container))+
geom_histogram()
ggplot(iris, aes(x= iris$substrate_one))+
geom_histogram()
ggplot(iris, aes(x= iris$substrate_one, fill= container))+
geom_histogram()
ggplot(iris, aes(x= iris$substrate_one, fill= container, facet_wrap(substrate)))+
geom_histogram()
ggplot(iris, aes(x= iris$substrate_one, fill= container), facet_wrap(substrate))+
geom_histogram()
ggplot(iris, x= iris$substrate, fill= container)+
geom_histogram()
plot(iris)
ggplot(iris,aes(x=iris$Species,y=iris$Sepal.Width)) +
geom_boxplot() + facet_wrap(~container)
ggplot(iris,aes(x=iris$Species,y=iris$Sepal.Width)) +
geom_hist() + facet_wrap(~container)
ggplot(iris,aes(x=iris$Species,y=iris$Sepal.Width)) +
geom_histogram() + facet_wrap(~container)
ggplot(iris,aes(x=iris$Species)) +
geom_histogram() + facet_wrap(~container)
ggplot(iris,aes(x=iris$substrate_one)) +
geom_histogram() + facet_wrap(~container)
df<- c("substrate_one", "substrate_two", "substrate_three")
View(x)
#?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
detectCores(all.tests = FALSE, logical = TRUE)
# Bootstrap
bs = bootstrap.pml(fitJC, bs=100, control = pml.control(trace = 0),multicore = TRUE, mc.cores = 1)
View(bs)
#?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
#?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
#?bootstrap.pml
# check tree with plot
plotBS(fitJC$tree,type="p")
# reload point
fitJC <- readRDS("../Chagos_2/WWP_fitJC.RDS")
View(fitJC)
ps = phyloseq(otu_table(ps@otu_table),
tax_table(ps@tax_table),
sample_data(ps@sam_data),
phy_tree(bs))
ps = phyloseq(otu_table(ps@otu_table),
tax_table(ps@tax_table),
sample_data(ps@sam_data),
phy_tree(fitJC))
treeNJ <- readRDS("../Chagos_2/treeNJ.RDS")
ps = phyloseq(otu_table(ps@otu_table),
tax_table(ps@tax_table),
sample_data(ps@sam_data),
phy_tree(fitJC$tree))
plot_tree(ps)
tree<-plot_tree(ps)
saveRDS(tree,"../Chagos_2/PHYLO_tree.RDS")
detach("package:phangorn", unload=TRUE)
tree<-readRDS("../Chagos_2/PHYLO_tree.RDS")
library(tidyverse)
library(phyloseq)
library(ggplot2)
library(tidyverse)
plot_richness(tree)
TP <- prune_species(speciesSums(tree) > 0, tree)
TP <- prune_taxa(taxa_sums(tree) > 0, tree)
ps <- prune_species(speciesSums(ps) > 0, ps)
#plot richness
plot_richness(ps)
#specify richness
plot_richness(ps,measures = c("Simpson", "Shannon"))
# choose some meaninful experimental values
sample_variables(ps)
plot_richness(ps, x="site", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Island", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="depth..m.", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Temp.Range..oC.", measures=c("Simpson", "Shannon"))
saveRDS(ps,"../Chagos_2/phyloseq_with_tree.RDS")
tree<-readRDS("../Chagos_2/phyloseq_with_tree.RDS")
PS <- prune_species(speciesSums(tree) > 0, tree)
plot_richness(PS)
# choose meaningful experimental value "SampleType"
plot_richness(PS, x="SampleType", measures=c("Simpson", "Shannon"))
plot_richness(ps,measures = c("Simpson", "Shannon"))
# choose some meaninful experimental values
sample_variables(ps)
plot_richness(ps, x="site", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Island", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="depth..m.", measures=c("Simpson", "Shannon"))
plot_richness(ps, x="Temp.Range..oC.", measures=c("Simpson", "Shannon"))
shannon = diversity((otu),index = "shannon")
# Read cleaned data
ps_ra <- readRDS("../Chagos_2/phyloseq_object_16S.RDS")
# convert OTU table and metadata to data.frame for easier downstream access
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
meta = as.data.frame(sample_data(ps_ra))
# convert OTU table to data.frame for easier downstream access
otu = as.data.frame(as(otu_table(ps_ra),"matrix"))
meta.numeric <- meta[,names(meta) %in% c("CoralAge","LAT","LON")]
meta.numeric <- meta.numeric[complete.cases(meta.numeric),]
corrplot(cor(meta.numeric), method = "color",title = "Correlation Between Coral Age and Location")
#Zahn git hub
# load packages
library(phyloseq)
library(tidyverse)
library(vegan)
library(corrplot)
library(ecodist)
library(ade4)
install.packages("corrplot")
library(corrplot)
library(modelr)
corrplot(cor(meta.numeric), method = "color",title = "Correlation Between Coral Age and Location")
meta.numeric <- meta[,names(meta) %in% c("CoralAge","LAT","LON")]
meta.numeric <- meta.numeric[complete.cases(meta.numeric),]
cov(meta.numeric)
corrplot(cor(meta.numeric), method = "color",title = "Correlation Between Coral Age and Location")
# Calculate alpha diversity measures ####
shannon = diversity((otu),index = "shannon")
richness = specnumber(otu)
# Does genotype affect bacterial alpha diversity? ####
mod.gen <- aov(shannon$shannon ~ meta$Genotype)
summary(mod.gen)
# Does genotype affect bacterial alpha diversity? ####
mod.gen <- aov(shannon ~ meta$`RFLP ID Species ID - confirmed`
# Does genotype affect bacterial alpha diversity? ####
mod.gen <- aov(shannon ~ meta$`RFLP ID Species ID - confirmed`
# Does genotype affect bacterial alpha diversity? ####
mod.gen <- aov(shannon ~ meta$`RFLP ID Species ID - confirmed`)
summary(mod.gen)
aged = !is.na(meta$Exposure)
tree<-plot_tree(ps)
# choose some meaninful experimental values
sample_variables(ps)
plot_richness(ps, x="site", measures=c("Simpson", "Shannon"))
jpeg("../Chagos_2/plot_richness_site")
plot_richness(ps, x="site", measures=c("Simpson", "Shannon"))
dev.off()
jpeg("../Chagos_2/plot_richness_island")
plot_richness(ps, x="Island", measures=c("Simpson", "Shannon"))
dev.off()
plot_richness(ps, x="depth..m.", measures=c("Simpson", "Shannon"))
jpeg("../Chagos_2/plot_richness_depth")
plot_richness(ps, x="depth..m.", measures=c("Simpson", "Shannon"))
dev.off()
plot_richness(ps, x="Temp.Range..oC.", measures=c("Simpson", "Shannon"))
jpeg("../Chagos_2/plot_richness_TempRange")
plot_richness(ps, x="Temp.Range..oC.", measures=c("Simpson", "Shannon"))
dev.off()
plot_richness(ps)
#specify richness
plot_richness(ps,measures = c("Simpson", "Shannon"))
#specify richness
jpeg("../Chagos_2/Alphadiversity_Simpson_Shannon")
plot_richness(ps,measures = c("Simpson", "Shannon"))
dev.off()
